# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TurboVolume
                                 A QGIS plugin
 This plugin calculate volume from raster
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-03-07
        git sha              : $Format:%H$
        copyright            : (C) 2020 by KNGK_GEOINFORMATYKA
        email                : kngk.ggiis@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
#dodana funkcja dodawania rastrów roboczych na mape "QgsRasterLayer"
from qgis.core import QgsProject, Qgis, QgsRasterLayer
from qgis.utils import iface
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Turbo_volume_dialog import TurboVolumeDialog
# Import potrzebnych funkcji do podzielenia rastra
import processing
import os.path
import os
import datetime
import math




class TurboVolume:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TurboVolume_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Turbo Volume')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('TurboVolume', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Turbo_volume/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'This plugin calculate volume from raster'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&Turbo Volume'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = TurboVolumeDialog()

            
            #definiowanie akcji wykonywanych po kliknieciu przyciskow lub zmianie watosci
            self.dlg.pushButton1.clicked.connect(self.select_output_file)
            
            self.dlg.button_box.accepted.connect(self.elevation)
            self.dlg.button_box.accepted.connect(self.volume)
            
        self.dlg.pushButton3.clicked.connect(self.elevation)
        self.dlg.pushButton3.clicked.connect(self.refMin)
        self.dlg.pushButton4.clicked.connect(self.elevation)
        self.dlg.pushButton4.clicked.connect(self.refMax)
            
        self.dlg.pushButton5.clicked.connect(self.defaultOptions)
        self.dlg.checkBox.stateChanged.connect(self.reportCreatingOptions)
        #nowy checkBox dla granicy
        self.dlg.checkBox_granice.stateChanged.connect(self.elevation)
        self.dlg.checkBox_granice.stateChanged.connect(self.delete_work)
        
        self.dlg.spinBox.valueChanged.connect(self.HDecimalsChange)
            
        self.layers = QgsProject.instance().layerTreeRoot().children()
        
        self.dlg.comboBox1.clear()
        self.dlg.comboBox1.addItems([layer.name() for layer in self.layers])
        
        #nowy comboBox dla granicy obszaru
        self.dlg.comboBox_granica.clear()
        self.dlg.comboBox_granica.addItems([layer.name() for layer in self.layers])
        
        self.dlg.lineEdit1.clear()
        self.dlg.doubleSpinBox.setValue(0)
        


 # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.iface.messageBar().pushMessage(
                "Success  "+"cut = "+str(self.cut)+"  fill = "+str(self.fill), level=Qgis.Success, duration=4)
            self.createReport()
            self.delete_work()
        else:
            self.defaultOptions()
    
    #wybor pliku wyjsciowego    
    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "select output text file", "", "*.txt")
        self.dlg.lineEdit1.setText(filename)
    
    #usuwanie warstw roboczych (przy wycinaniu tworzą się dwa pliki
    #jest to wynikiem specyfikacji formatu tiff)
    def delete_work(self):
        if self.dlg.checkBox_granice.isChecked():
            resztki = self.outputroboczy + ".aux.xml"
            os.remove(self.outputroboczy)
            os.remove(resztki)
    #odczyt danych z rastra
    def elevation(self):
        selectedLayerIndex=self.dlg.comboBox1.currentIndex()
        layer=self.layers[selectedLayerIndex].layer()
        #wycinanie konkretnego obszaru za pomocą warstwy z poligonem
        if self.dlg.checkBox_granice.isChecked():
            #tworzenie warstwy roboczej za pomocą warstwy wejściowej" 
            filename = layer.dataProvider().dataSourceUri()
            self.outputroboczy = filename[:-4] + "robb.tif"
            granicabyIndex = self.dlg.comboBox_granica.currentIndex()
            granica = self.layers[granicabyIndex].layer()
            processing.run('gdal:cliprasterbymasklayer',{'INPUT': layer,
                'MASK': granica,
                'ALPHA_BAND': False,
                'CROP_TO_CUTLINE': True,
                'KEEP_RESOLUTION': False,
                'OPTIONS': "",
                'DATA_TYPE': 0,
                'OUTPUT': self.outputroboczy})
            layer = QgsRasterLayer(self.outputroboczy, "layer name you like")
        else:    #niestety konieczne jest podanie dowolnej wartości ponieważ inaczej niż przez return nie dałem rady wydobyć ścieżki
            self.outputroboczy = "brak" 
            
        provider = layer.dataProvider()
        extent=provider.extent()
        rows=layer.height()
        cols=layer.width() 
        noData=provider.sourceNoDataValue(1) #odczytanie wartosci braku danych (1 to numer kanału)
        block=provider.block(1, extent, cols, rows)
        
        self.hdecimals=self.dlg.spinBox.value()
        
        #odczytanie wymiarow piksela
        self.pSizeX=layer.rasterUnitsPerPixelX()
        self.pSizeY=layer.rasterUnitsPerPixelY()
        
        self.list=[] #utworzenie pustej listy do zapisu wartosci pikseli 
        
        #odczyt wartości każdego piksela (z pominieciem braku danych) i zapis do listy
        for r in range(rows):
            for c in range(cols):
                if block.value(r,c)==noData:
                    continue
                else:
                    self.list.append(block.value(r,c))

        return self.list, self.pSizeX, self.pSizeY, self.hdecimals, self.outputroboczy
    
    #obliczenie objetosci na podstawie: wysokosci plaszczyzny odniesienia, powierzchni piksela, wartosci pikseli
    def volume(self):
        #zalozenia poczatkowe
        self.refer=0
        self.cut=0
        self.fill=0
        
        self.pArea=self.pSizeX*self.pSizeY #policzenie powierzchni piksela
        self.refer=self.dlg.doubleSpinBox.value() #odczytanie wpisanej wysokosci plaszczyzny odniesienia
        
        #obliczenie objetosci nasypow i wykopow
        for pix in self.list:
            pix=round(pix,self.hdecimals)
            if pix>self.refer:
                self.cut=self.cut+self.pArea*(pix-self.refer)
            else:
                self.fill=self.fill+self.pArea*(pix-self.refer)
        
        #liczba miejsc po przecinku
        vdecimals=self.dlg.spinBox2.value()
        self.cut=round(self.cut,vdecimals)
        self.fill=round(self.fill,vdecimals)
        
        return self.cut, self.fill, self.refer
    
    #odszukanie wysokosci minimalnej na danym rastrze i wpisanie do okna z wysokoscia plaszczyzny odniesienia   
    def refMin(self):
        self.dlg.doubleSpinBox.setValue(min(self.list))
    
    #odszukanie wysokosci maksymalnej na danym rastrze i wpisanie do okna z wysokoscia plaszczyzny odniesienia     
    def refMax(self):
        self.dlg.doubleSpinBox.setValue(max(self.list))
    
    #utworzenie raportu txt    
    def createReport(self):
        time=datetime.datetime.now()
        
        report=("time: "+str(time)+"\n\n"+
        "H min = "+str(round(min(self.list),self.hdecimals))+"\n"+
        "H max = "+str(round(max(self.list),self.hdecimals))+"\n\n"+
        "H reference = "+str(self.refer)+"\n"+
        "cut = "+str(self.cut)+"\n"+
        "fill = "+str(self.fill)+"\n")
        
        #tworzenie nowego raportu lub dopisywanie do istniejącego (tylko jeśli jest zaznaczona opcja tworzenia raportu)
        if self.dlg.checkBox.isChecked():
            if self.dlg.radioButton.isChecked():
                outputReport = open( self.dlg.lineEdit1.text(), "w")
                outputReport.writelines(report)
                outputReport.close()
            else:
                outputReport = open( self.dlg.lineEdit1.text(), "a")
                outputReport.writelines(report)
                outputReport.close()
    
    #wlaczanie i wylacznie dostepnosci wprowadzania sciezki raportu oraz wyboru rodzaju nowy/dopisz, w zaleznosci czy opcja tworzenia raportu jest zaznaczona
    def reportCreatingOptions (self):
        if self.dlg.checkBox.isChecked():
            self.dlg.lineEdit1.setEnabled(1)
            self.dlg.pushButton1.setEnabled(1)
            self.dlg.radioButton.setEnabled(1)
            self.dlg.radioButton1.setEnabled(1)
        else:
            self.dlg.lineEdit1.setEnabled(0)
            self.dlg.pushButton1.setEnabled(0)
            self.dlg.radioButton.setEnabled(0)
            self.dlg.radioButton1.setEnabled(0)
            
    #definiowanie ustawien domyslnych
    def defaultOptions (self):
        self.dlg.checkBox.setChecked(1)
        self.dlg.radioButton.setChecked(1)
        self.dlg.spinBox.setValue(3)
        self.dlg.spinBox2.setValue(3)
    
    #zmiana ilosci miejsc po przecinku dla wprowadzania wysokosci odniesienia
    def HDecimalsChange (self):
        hdecimals=self.dlg.spinBox.value()
        self.dlg.doubleSpinBox.setDecimals(hdecimals)
